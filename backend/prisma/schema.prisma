// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model - for authenticated users only
model User {
  id              String    @id @default(uuid())
  phone           String    @unique
  firstName       String?
  lastName        String?
  middleName      String?
  isPhoneVerified Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Relations
  anonymousUsers  AnonymousUser[]
  carts           Cart[]
  orders          Order[]
  favorites       Favorite[]
  chats           Chat[]
  otpCodes        OtpCode[]
}

// AnonymousUser model - for anonymous users
model AnonymousUser {
  id           String   @id @default(uuid())
  token        String   @unique
  userId       String?  // Will be set when anonymous user registers
  lastActivity DateTime @default(now())
  createdAt    DateTime @default(now())

  // Relations
  user         User?      @relation(fields: [userId], references: [id])
  carts        Cart[]
  favorites    Favorite[]
  chats        Chat[]

  @@index([userId])
  @@index([token])
}

// OtpCode model - for storing SMS verification codes
model OtpCode {
  id        String   @id @default(uuid())
  userId    String
  code      String
  attempts  Int      @default(0)
  expiresAt DateTime
  verified  Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id])

  @@index([userId])
  @@index([code])
}

// Brand model - product manufacturers
model Brand {
  id          String   @id @default(uuid())
  name        String   @unique
  slug        String   @unique
  description String?
  logo        String?  // URL логотипа
  website     String?  // Сайт производителя
  country     String?  // Страна производителя
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  products Product[]

  @@index([slug])
  @@index([isActive])
}

// Category model - hierarchical structure
model Category {
  id          String  @id @default(uuid())
  name        String
  slug        String  @unique
  description String?
  parentId    String?
  isActive    Boolean @default(true)
  sortOrder   Int     @default(0)

  // Relations
  parent      Category?  @relation("CategoryToCategory", fields: [parentId], references: [id])
  children    Category[] @relation("CategoryToCategory")
  products    ProductCategory[]
  attributes  CategoryAttribute[]

  @@index([parentId])
  @@index([slug])
}

// Product model
model Product {
  id           String  @id @default(uuid())
  sku          String  @unique
  name         String
  slug         String  @unique
  description  String?
  price        Decimal @db.Decimal(10, 2)
  stock        Int     @default(0)
  isActive     Boolean @default(true)
  images       Json    @default("[]") // Array of image URLs
  brandId      String? // Необязательная связь с брендом
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  brand          Brand?             @relation(fields: [brandId], references: [id])
  categories     ProductCategory[]
  specifications Specification[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  favorites      Favorite[]
  attributes     ProductAttribute[]
  vehicles       ProductVehicle[]

  @@index([sku])
  @@index([slug])
  @@index([brandId])
}

// Many-to-many relation between products and categories
model ProductCategory {
  id         String   @id @default(uuid())
  productId  String
  categoryId String
  createdAt  DateTime @default(now())

  // Relations
  product  Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@unique([productId, categoryId])
  @@index([productId])
  @@index([categoryId])
}

// Specification model - product characteristics
model Specification {
  id        String @id @default(uuid())
  productId String
  name      String
  value     String

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}


// Cart model
model Cart {
  id              String   @id @default(uuid())
  userId          String?
  anonymousUserId String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user            User?          @relation(fields: [userId], references: [id])
  anonymousUser   AnonymousUser? @relation(fields: [anonymousUserId], references: [id])
  items           CartItem[]

  @@unique([userId])
  @@unique([anonymousUserId])
  @@index([userId])
  @@index([anonymousUserId])
}

// Cart items
model CartItem {
  id        String   @id @default(uuid())
  cartId    String
  productId String?
  offerId   String?
  quantity  Int
  createdAt DateTime @default(now())

  // Relations
  cart    Cart           @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product?       @relation(fields: [productId], references: [id])
  offer   ProductOffer?  @relation(fields: [offerId], references: [id])

  @@index([cartId])
  @@index([productId])
  @@index([offerId])
}

// Favorites
model Favorite {
  id              String   @id @default(uuid())
  userId          String?
  anonymousUserId String?
  productId       String
  createdAt       DateTime @default(now())

  // Relations
  user          User?          @relation(fields: [userId], references: [id])
  anonymousUser AnonymousUser? @relation(fields: [anonymousUserId], references: [id])
  product       Product        @relation(fields: [productId], references: [id])

  @@unique([userId, productId])
  @@unique([anonymousUserId, productId])
  @@index([userId])
  @@index([anonymousUserId])
  @@index([productId])
}

// Order status - dynamic, stored in DB
model OrderStatus {
  id        String  @id @default(uuid())
  code      String  @unique
  name      String
  sortOrder Int     @default(0)
  isActive  Boolean @default(true)
  orders    Order[]
}

// Delivery method - dynamic, stored in DB
model DeliveryMethod {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String?
  price       Decimal @db.Decimal(10, 2)
  isActive    Boolean @default(true)
  orders      Order[]
}

// Payment method - dynamic, stored in DB
model PaymentMethod {
  id          String  @id @default(uuid())
  code        String  @unique
  name        String
  description String?
  isActive    Boolean @default(true)
  orders      Order[]
}

// Order model
model Order {
  id               String   @id @default(uuid())
  orderNumber      String   @unique
  userId           String
  statusId         String
  deliveryMethodId String
  paymentMethodId  String
  totalAmount      Decimal  @db.Decimal(10, 2)
  deliveryAmount   Decimal  @db.Decimal(10, 2)
  
  // Contact information
  customerName     String
  customerPhone    String
  customerEmail    String?
  
  // Delivery information
  deliveryAddress  String?
  deliveryCity     String?
  deliveryStreet   String?
  deliveryBuilding String?
  deliveryApartment String?
  deliveryPostalCode String?
  
  comment          String?
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  user           User           @relation(fields: [userId], references: [id])
  status         OrderStatus    @relation(fields: [statusId], references: [id])
  deliveryMethod DeliveryMethod @relation(fields: [deliveryMethodId], references: [id])
  paymentMethod  PaymentMethod  @relation(fields: [paymentMethodId], references: [id])
  items          OrderItem[]

  @@index([userId])
  @@index([statusId])
  @@index([orderNumber])
}

// Order items
model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String?
  offerId   String?
  quantity  Int
  price     Decimal @db.Decimal(10, 2)

  // Relations
  order   Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product?      @relation(fields: [productId], references: [id])
  offer   ProductOffer? @relation(fields: [offerId], references: [id])

  @@index([orderId])
  @@index([productId])
  @@index([offerId])
}


// Chat model
model Chat {
  id              String   @id @default(uuid())
  userId          String?
  anonymousUserId String?
  managerId       String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relations
  user          User?          @relation(fields: [userId], references: [id])
  anonymousUser AnonymousUser? @relation(fields: [anonymousUserId], references: [id])
  messages      ChatMessage[]
  offers        ProductOffer[]

  @@index([userId])
  @@index([anonymousUserId])
  @@index([managerId])
}

// Chat messages
model ChatMessage {
  id        String   @id @default(uuid())
  chatId    String
  senderId  String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  chat Chat @relation(fields: [chatId], references: [id], onDelete: Cascade)

  @@index([chatId])
  @@index([senderId])
}

// Product offers from managers
model ProductOffer {
  id          String   @id @default(uuid())
  chatId      String
  managerId   String
  name        String
  description String?
  price       Decimal  @db.Decimal(10, 2)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  expiresAt   DateTime?

  // Relations
  chat      Chat       @relation(fields: [chatId], references: [id])
  cartItems CartItem[]
  orderItems OrderItem[]

  @@index([chatId])
  @@index([managerId])
}

// Attribute system for products
enum AttributeType {
  SELECT_ONE    // Single select from list
  SELECT_MANY   // Multiple select from list  
  NUMBER        // Numeric value
  TEXT          // Text value
  COLOR         // Color (HEX)
}

// Attribute definition
model Attribute {
  id            String              @id @default(uuid())
  code          String              @unique
  name          String
  type          AttributeType
  unit          String?             // Unit of measurement (for numeric)
  isRequired    Boolean             @default(false)
  isFilterable  Boolean             @default(false)
  sortOrder     Int                 @default(0)
  createdAt     DateTime            @default(now())
  updatedAt     DateTime            @updatedAt
  
  // Relations
  options       AttributeOption[]
  categories    CategoryAttribute[]
  productValues ProductAttribute[]
}

// Possible values for SELECT_ONE and SELECT_MANY attributes
model AttributeOption {
  id          String   @id @default(uuid())
  attributeId String
  value       String
  sortOrder   Int      @default(0)
  
  // Relations
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  
  @@index([attributeId])
}

// Link attributes to categories
model CategoryAttribute {
  id          String   @id @default(uuid())
  categoryId  String
  attributeId String
  isRequired  Boolean  @default(false)
  sortOrder   Int      @default(0)
  
  // Relations
  category    Category  @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  
  @@unique([categoryId, attributeId])
  @@index([categoryId])
  @@index([attributeId])
}

// Product attribute values
model ProductAttribute {
  id          String   @id @default(uuid())
  productId   String
  attributeId String
  
  // Values based on attribute type
  textValue   String?
  numberValue Float?
  colorValue  String?  // HEX color
  optionIds   String[] // Array of option IDs for SELECT_MANY
  
  // Relations
  product     Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  attribute   Attribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)
  
  @@unique([productId, attributeId])
  @@index([productId])
  @@index([attributeId])
}

// Vehicle Brands (Car Makes)
model VehicleBrand {
  id           String   @id @default(uuid())
  externalId   String   @unique // ID из cars.json (например: "ABARTH")
  name         String   // Английское название
  nameCyrillic String   // Кириллическое название
  slug         String   @unique
  country      String?
  logo         String?
  popular      Boolean  @default(false)
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  models VehicleModel[]

  @@index([slug])
  @@index([popular])
  @@index([isActive])
}

// Vehicle Models
model VehicleModel {
  id           String   @id @default(uuid())
  externalId   String   @unique // ID из cars.json (например: "ABARTH_124_SPIDER")
  brandId      String
  name         String   // Английское название
  nameCyrillic String   // Кириллическое название
  slug         String   @unique
  class        String   // Класс автомобиля (A, B, C, D, E, S и т.д.)
  yearFrom     Int      // Год начала производства
  yearTo       Int?     // Год окончания производства (null если еще производится)
  image        String?
  isActive     Boolean  @default(true)
  sortOrder    Int      @default(0)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  brand    VehicleBrand    @relation(fields: [brandId], references: [id])
  products ProductVehicle[]

  @@index([brandId])
  @@index([slug])
  @@index([class])
  @@index([yearFrom, yearTo])
  @@index([isActive])
}

// Product to Vehicle relationship
model ProductVehicle {
  id               String   @id @default(uuid())
  productId        String
  vehicleModelId   String
  yearFrom         Int?     // Начальный год (если не указан - с начала выпуска модели)
  yearTo           Int?     // Конечный год (если не указан - до конца выпуска модели)
  fitmentNotes     String?  // Примечания по установке
  isUniversal      Boolean  @default(false) // Подходит для всех модификаций
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  product      Product      @relation(fields: [productId], references: [id], onDelete: Cascade)
  vehicleModel VehicleModel @relation(fields: [vehicleModelId], references: [id], onDelete: Cascade)

  @@unique([productId, vehicleModelId, yearFrom, yearTo])
  @@index([productId])
  @@index([vehicleModelId])
  @@index([yearFrom])
  @@index([yearTo])
}
